/* gnubc program: bezout */

define sign(a){
	if(a>0) return(1)
	if(a<0) return(-1)
	return(0)
}

/* absolute value of an integer n */

define abs(n){
	if(n>=0) return(n)
	return(-n)
}

/* From Henri Cohen' book, Alg. 1.3.6  13/07/2011 
 * This assumes a >=0 and b >= 0. 
 * returns d= gcd(a,b) and global variables globalu and globalv,
 * where d = globalu.a + globalv.b.
 */
define bezout(a,b){
auto d,v1,v3,t1,t3,q
   globalu=1
   d=a
   if(b==0){
      globalv=0
      return(a)
   }else{
      v1=0
      v3=b
   }
   while(v3>0){
      q=d/v3
      t3=d%v3
      t1=globalu-q*v1
      globalu=v1
      d=v3
      v1=t1
      v3=t3
   }
   globalv=(d-a*globalu)/b
   return(d)
}

/* Here a and b are any integers.
 * returns d= gcd(a,b) and global variables globalu and globalv,
 * where d = globalu.a + globalv.b.
 */
define bezout1(a,b){
auto u,v,absa,absb,d

   if(a<0){
     absa=-a
   }else{
     absa=a
   }
   if(b<0){
     absb=-b
   }else{
     absb=b
   }
   d=bezout(absa,absb)
   globalu=globalu*sign(a)
   globalv=globalv*sign(b)
   return(d)
}
