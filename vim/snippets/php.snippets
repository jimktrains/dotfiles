snippet usefacade
	use Illuminate\Support\Facades\\${1:CLASS};
snippet uselog
	use Illuminate\Support\Facades\Log;
snippet usex
	use Exception
snippet usemsqcx
	use Msqc\Core\Exceptions\MsqcException;
snippet namespace
	namespace ${1:`substitute(substitute(expand("%:h"), 'app', 'App', ''), '\/', '\\\', 'g')`};
snippet namespaceclass
	namespace ${1:`substitute(substitute(expand("%:h"), 'app', 'App', ''), '\/', '\\\', 'g')`};

	/**
	 * Class ${2:`vim_snippets#Filename()`}
	 * @package $1
	 */
	${3:abstract }class $2
	{
		${0:${VISUAL}}
	}
snippet mvar
	/**
	 * @var ${1:type}
	 */
	${2:protected} $${3:$1};

snippet mvargs
	/**
	 * @var ${1:type}
	 */
	${2:protected} $${3:$1};

	/**
	 * Sets the value of $3
	 *
	 * @param $1 $$3
	 *
	 * @return ${5:`vim_snippets#Filename()`}
	 */
	${6:public} function set${7:$3}($1 $$3)
	{
		$this->$3 = $$3;
		return $this;
	}

	/**
	 * Gets the value of $3
	 *
	 * @return $1
	 */
	${8:public} function get$7()
	{
		return $this->$3;
	}

snippet resolver
	<?php

	namespace ${1:`substitute(substitute(expand("%:h"), 'app', 'App', ''), '\/', '\\\', 'g')`};

	use $1\\${2:`substitute(vim_snippets#Filename(), 'Resolver','','')`}Resolvers\ResolutionMethod;

	/**
	 * Class $2Resolver
	 * @package $1
	 */
	class $2Resolver
	{
		protected $resolutionList = [];

		public function append(ResolutionMethod $ResolutionMethod)
		{
			$this->resolutionList[] = $ResolutionMethod;
			return $this;
		}

		/**
		 * Resolves the $2 for the ${3:Data}.
		 *
		 * @param $3 $model Input data to the descion making process
		 *
		 * @return ${4:OtherData}
		 */
		public function __invoke($3 $model)
		{
			foreach ($this->resolutionList as $method)
			{
				$output = $method($model);
				if (!empty($output))
				{
					return $output;
				}
			}

			throw new Exception('No $2 could be resolved');
		}
	}

snippet msm "PHP Class Setter"
	/**
	 * Sets the value of ${1:foo}
	 *
	 * @param ${2:string} $$1 ${3:description}
	 *
	 * @return ${4:`vim_snippets#Filename()`}
	 */
	${5:public} function set${6:`substitute($1, '^.', '\u&', 'g')`}(${7:$2 }$$1)
	{
		$this->${8:$1} = $$1;

		return $this;
	}
snippet mgm "PHP Class Getter Setter"
	/**
	 * Gets the value of ${1:foo}
	 *
	 * @return ${2:string}
	 */
	${3:public} function get${4:`substitute($1, '^.', '\u&', 'g')`}()
	{
		return $this->${5:$1};
	}
snippet resolutionmethod
	<?php

	namespace ${1:`substitute(substitute(expand("%:h"), 'app', 'App', ''), '\/', '\\\', 'g')`};

	class ${2:`vim_snippets#Filename()`} implements ResolutionMethod
	{
		public function __invoke(${3:Data } $model)
		{
			${0:${VISUAL}}
		}
	}
snippet iresolutionmethod
	<?php

	namespace ${1:`substitute(substitute(expand("%:h"), 'app', 'App', ''), '\/', '\\\', 'g')`};

	interface ${2:`vim_snippets#Filename()`}
	{
		public function __invoke(${3:Data } $model);
	}
snippet func "Function with docblock"
	/**
	  * ${1:description}
		*
		* @return ${2:void}
		*/
	${3:public} function ${4:name}(${5:params})
	{
		${6:${VISUAL}}
	}
